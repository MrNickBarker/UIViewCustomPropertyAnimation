//
//  OCLayer.m
//  UIViewCustomPropertyAnimation
//
//  Created by Nikola Lajic on 6/7/16.
//  Copyright Â© 2016 codecentric. All rights reserved.
//

#import "OCLayer.h"
#import <UIKit/UIKit.h>

@implementation OCLayer
/**
 *  Needs to be dynamic to support implicit animations
 *  Important: Don't override the getter and setter because they are generated by CALayer
 */
@dynamic percent;

// Without this the custom property is not set correctly without animations.
- (id)initWithLayer:(id)layer
{
    self = [super initWithLayer:layer];
    if (self)
    {
        if ([layer isKindOfClass:[OCLayer class]])
        {
            self.percent = ((OCLayer *)layer).percent;
        }
    }
    return self;
}

+ (BOOL)isCustomAnimKey:(NSString *)key
{
    return [key isEqualToString:@"percent"];
}

+ (BOOL)needsDisplayForKey:(NSString *)key
{
    if ([self isCustomAnimKey:key]) return true;
    return [super needsDisplayForKey:key];
}

- (id<CAAction>)actionForKey:(NSString *)key
{
    if ([[self class] isCustomAnimKey:key])
    {
        // check if a propery that is animated by UIView animations is currently animating
        // i.e. if we are inside of an animation block
        id animation = [super actionForKey:@"backgroundColor"];
        if (animation == nil || [animation isEqual:[NSNull null]])
        {
            // needed if it's stopping an existing animation
            [self setNeedsDisplay];
            return [NSNull null];
        }
        // repurpose the animation
        [animation setKeyPath:key];
        // must check the presentation layer value
        [animation setFromValue:@([self.presentationLayer percent])];
        // reset the to value of the "stolen" animation
        [animation setToValue:nil];
        return animation;
    }
    return [super actionForKey:key];
}

@end
